#include <iostream>
#include <vector>
#include <math.h>

void printVector(std::vector<double>& v) 
{
    for (auto i = v.begin(); i != v.end(); ++i)
    {
        std::cout << *i << ' ';
    }
    std::cout << std::endl;
}

void ordenaVector(std::vector<double>& data)
{
    int tam = data.size();

    for(int i = 0; i < tam; i++)
    {
        std::cout << data[i] << " ";
    }
}

double average(const std::vector<double>& data)
{
    double var = 0;

    for(int i = 0; i < data.size(); i++)
    {
        var = var + data[i];
    }

    return var/data.size();
}

double variance(const std::vector<double>& data)
{
    double media = average(data);
    int qtde = data.size();
    double variancia = 0.0;

    for (int i = 0; i < qtde; i++)
    {
        variancia = variancia + pow((data[i] - media),2);
    }

    return variancia/qtde;
}


double std_dev(const std::vector<double>& data)
{
    return sqrt(variance(data));
}

double normal_distribution_pdf(double x, double mu, double std_dev)
{
    double PI = 3.14;
    double E = 2.71;
    double std_dev_q = pow(std_dev,2);
    double dn = (2 * PI) * std_dev_q;
    double var1 = sqrt(dn);
    double pt = pow(x-mu,2)/(2 * std_dev_q);
    double var2 = pow(E,-pt);
    double result = 1 / (var1 * var2);

    return result;
}

double normal_distribution_pdf(double x)
{
    double PI = 3.14;
    double E = 2.71;
    double mu = 0;
    double std_dev = 1;
    double std_dev_q = pow(std_dev,2);
    double var1 = (2 * PI) * std_dev_q;
    var1 = sqrt(var1);

    double var2 = pow(x-mu,2) / (2 * std_dev_q);
    var2 = pow(E,-var2);

    double result = 1 / (var1 * var2);

    return result;
}

int main(){

    std::vector <double> numeros{1,4,9,10,14,25,29,48,51,77,82,87,7,2,21,5,3,12,99,20};
    double media = average(numeros);
    double desvioPadrao = std_dev(numeros);
    double x;

    std::cout << "Digite um valor para o ponto: ";
    std::cin >> x;

    std::cout << "Media: " << average(numeros) << std::endl;
    std::cout << "Desvio Padrao: " << desvioPadrao << std::endl;
    std::cout << "Distribuicao 1: " << normal_distribution_pdf(x, media, desvioPadrao) << std::endl;
    std::cout << "Distribuicao 2: " << normal_distribution_pdf(x) << std::endl;
    std::cout << "Vetor: ";
    printVector(numeros);

    std::cout << "Vetor Ordenado: ";
    ordenaVector(numeros);

    return 0;
}
